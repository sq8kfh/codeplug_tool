name: CMake on multiple platforms

on:
  push:
    tags:
    - '*'
    
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Copy file
      run: |
        cp ${{ github.workspace }}/README.md ${{ github.workspace }}/build/README.md
        cp ${{ github.workspace }}/LICENSE ${{ github.workspace }}/build/LICENSE
        
    - name: 'Tar files'
      run: tar -C ${{ github.workspace }}/build/ -cvzf ${{ github.workspace }}/codeplug_tool-${{ github.ref_name }}-${{ runner.os }}.${{ runner.arch }}.tar.gz codeplug_tool* README.md LICENSE

    - name: Output wd
      run:  ls -l ${{ github.workspace }}  
    - name: Output wd
      run:  ls -l ${{ github.workspace }}/build/
      
    - uses: actions/upload-artifact@v4
      name: Upload codeplug_tool
      id: artifact-upload-step
      with:
        name: codeplug_tool-${{ github.ref_name }}-${{ runner.os }}.${{ runner.arch }}
        retention-days: 2
        overwrite: true
        path:  ${{ github.workspace }}/codeplug_tool-${{ github.ref_name }}-${{ runner.os }}.${{ runner.arch }}.tar.gz

    - name: Output artifact ID
      run:  echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

  release:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Output wd
      run:  ls -l ${{ github.workspace }}  
    - uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: ${{ github.workspace }}/*
        
