# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    tags:
    - '*'
    
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - uses: actions/upload-artifact@v4
      name: Upload codeplug_tool
      id: artifact-upload-step
      with:
        name: codeplug_tool-${{ matrix.os }}
        retention-days: 2
        overwrite: true
        path: |
          ${{ github.workspace }}/build/codeplug_tool
          ${{ github.workspace }}/README.md
          ${{ github.workspace }}/LICENSE

    - name: Output artifact ID
      run:  echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
      
    - name: Output matrix
      run:  echo 'matrix is ${{ toJson(matrix) }}'

    - name: Output github
      run:  echo 'github is ${{ toJson(github) }}'

    - name: Output env
      run:  echo 'env is ${{ toJson(env) }}'

    - name: Output inputs
      run:  echo 'inputs is ${{ toJson(inputs) }}'

    - name: Output strategy
      run:  echo 'strategy is ${{ toJson(strategy) }}'
      
    - name: Output runner
      run:  echo 'runner is ${{ toJson(runner) }}'   
      
    - name: Sh1
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: ls -l ${{ github.workspace }}/build

    - name: Sh2
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: ls -l ${{ github.workspace }}

    # - uses: ncipollo/release-action@v1.14.0
    #   with:
    #     artifacts: ${{ github.workspace }}/build/codeplug_tool
        
